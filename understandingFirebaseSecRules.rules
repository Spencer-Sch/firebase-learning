// Notes and code along for Video 2 Understanding Firebase Security Rules video playlist

///////////////////////////////////////////////////////////
// Video 2 - Matching Documents in Cloud Firestore (Part 1)

// NOTE: by default, all access is denied when being accessed by a mobile or web client.

// Required boilerplate for Firestore Rules:

service cloud firestore {
  match /databases/{database}/documents { // this line matched the "root" document in the database of the firestore project. There is only one database per project.
    match /users/{uid} { // matching users collection and {uid} is a wildcard that corresponds to any users document
      allow read;
      allow write:
        if request.auth.uid == uid; // this allows write if the incoming request user uid = the uid of the document trying to be accessed. this uid will compare against the {uid} from the match line above.
    }

    match /users/{uid}/photos/{photoId} { // this targets a sub-collection that is nested inside of a users document.
      // In here:
      // uid = "sparky"
      // photoId = "abs123"
      allow read, write: // allows users to read and write only thier own photos.
        if request.auth.uid == uid;
    }

    // ALTERNATIVE WAY TO NEST RULES TO MIRROR THE NESTING OF SUB-DOCUMENTS

    match /users/{uid} {
      allow read;
      allow write:
        if request.auth.uid == uid;

      match /photos/{photoId} { // this nested match functions the same as the above /users/{uid}/photos/{photoId}
        // In here:
        // uid = "sparky"
        // photoId = "abs123"
        allow read, write:
          if request.auth.uid == uid;
      }
    }
  }
}
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// Video 3 - Matching Documents in Cloud Firestore (Part 2)
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} { // the {document=**} matches ALL documents and is called a "Glob" rule
      allow read, write;
    }

    match /users/{document=**} { // this is another "glob" rule that matches all user documents and all documents in all sub-collections
      allow read;
    }
  }
}

// difference between rules version 1 and 2
rules_version = "1";
// - Globs must match at least one or more path segments
// - Only effective at the end of the match path

rules_version = "2";
// - Globs can match zero or more path segments
// - Effective anywhere in the match path

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{uid}/{document=**} {
      // uid = "sparky"
      // document contains an EMPTY PATH
      allow read;
      allow write: if request.auth.uid == uid;
    }

  }
}

//////////////////
// writing a rule that will limit access to all "history" sub-collections on all user collections:
//
// /users/sparky/history
//                  /abc123 = { act: "click" }
//                  /xyz789 = { act: "swipe" }
// /users/switch/history
//                  /foo000 = { act: "steal" }
//                  /bar777 = { act: "pick" }

// the goal of the rule is to say only "click" type actions can be querried by
// firestore.collectionGroup("history").get(); // this will fail to pass the security rule below.
// firestore.collectionGroup("history")
//  .where("act", "==", "click").get(); // this will pass

rules_version = "2";
match /{prefix=**}/history/{id} { // glob path "prefix" at the beginning of the path and normal path id at the end
  allow read: if resource.data.act = "click";
}
///////////////////////////////////////////////////////////